'use client';

import React, { useState } from 'react';
import { Send, User, Mail, Phone, MessageSquare, AlertCircle, CheckCircle, Loader2 } from 'lucide-react';
import styles from '../styles/contact.module.css';

interface FormData {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
}

interface FormErrors {
  name?: string;
  email?: string;
  phone?: string;
  subject?: string;
  message?: string;
}

const ContactForm: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({
    name: '',
    email: '',
    phone: '',
    subject: '',
    message: ''
  });

  const [errors, setErrors] = useState<FormErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');

  // Validation functions
  const validateEmail = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const validatePhone = (phone: string): boolean => {
    const phoneRegex = /^[0-9+\-\s()]{10,15}$/;
    return phoneRegex.test(phone.replace(/\s/g, ''));
  };

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};

    // Name validation
    if (!formData.name.trim()) {
      newErrors.name = 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n';
    } else if (formData.name.trim().length < 2) {
      newErrors.name = 'H·ªç v√† t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±';
    } else if (formData.name.trim().length > 50) {
      newErrors.name = 'H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±';
    }

    // Email validation
    if (!formData.email.trim()) {
      newErrors.email = 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ email';
    } else if (!validateEmail(formData.email)) {
      newErrors.email = 'ƒê·ªãa ch·ªâ email kh√¥ng h·ª£p l·ªá';
    }

    // Phone validation
    if (!formData.phone.trim()) {
      newErrors.phone = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i';
    } else if (!validatePhone(formData.phone)) {
      newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (10-11 s·ªë)';
    }

    // Subject validation
    if (!formData.subject.trim()) {
      newErrors.subject = 'Vui l√≤ng ch·ªçn ch·ªß ƒë·ªÅ';
    }

    // Message validation
    if (!formData.message.trim()) {
      newErrors.message = 'Vui l√≤ng nh·∫≠p n·ªôi dung tin nh·∫Øn';
    } else if (formData.message.trim().length < 10) {
      newErrors.message = 'N·ªôi dung tin nh·∫Øn ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±';
    } else if (formData.message.trim().length > 1000) {
      newErrors.message = 'N·ªôi dung tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c qu√° 1000 k√Ω t·ª±';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    // Clear error when user starts typing
    if (errors[name as keyof FormErrors]) {
      setErrors(prev => ({
        ...prev,
        [name]: undefined
      }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    setSubmitStatus('idle');

    try {
      // Simulate form submission (no API call)
      console.log('üìß Contact form data:', {
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        subject: formData.subject,
        message: formData.message,
        timestamp: new Date().toISOString()
      });

      // Simulate processing time
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Simulate successful submission
      setSubmitStatus('success');
      setFormData({
        name: '',
        email: '',
        phone: '',
        subject: '',
        message: ''
      });

      // Scroll to success message
      setTimeout(() => {
        const successElement = document.querySelector(`.${styles.successMessage}`);
        if (successElement) {
          successElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }, 100);

    } catch (error) {
      console.error('Form submission error:', error);
      setSubmitStatus('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className={styles.contactFormContainer}>
      <div className={styles.formHeader}>
        <h2 id="contact-form-heading">G·ª≠i tin nh·∫Øn cho ch√∫ng t√¥i</h2>
        <p>ƒêi·ªÅn th√¥ng tin v√†o form b√™n d∆∞·ªõi v√† ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.</p>
      </div>

      <form onSubmit={handleSubmit} className={styles.contactForm} noValidate>
        {/* Name Field */}
        <div className={styles.formGroup}>
          <label htmlFor="name" className={styles.formLabel}>
            <User size={18} aria-hidden="true" />
            H·ªç v√† t√™n <span className={styles.required}>*</span>
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleInputChange}
            className={`${styles.formInput} ${errors.name ? styles.inputError : ''}`}
            placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n"
            aria-describedby={errors.name ? 'name-error' : undefined}
            maxLength={50}
            autoComplete="name"
          />
          {errors.name && (
            <span id="name-error" className={styles.errorMessage} role="alert">
              <AlertCircle size={16} aria-hidden="true" />
              {errors.name}
            </span>
          )}
        </div>

        {/* Email Field */}
        <div className={styles.formGroup}>
          <label htmlFor="email" className={styles.formLabel}>
            <Mail size={18} aria-hidden="true" />
            Email <span className={styles.required}>*</span>
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleInputChange}
            className={`${styles.formInput} ${errors.email ? styles.inputError : ''}`}
            placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email c·ªßa b·∫°n"
            aria-describedby={errors.email ? 'email-error' : undefined}
            autoComplete="email"
          />
          {errors.email && (
            <span id="email-error" className={styles.errorMessage} role="alert">
              <AlertCircle size={16} aria-hidden="true" />
              {errors.email}
            </span>
          )}
        </div>

        {/* Phone Field */}
        <div className={styles.formGroup}>
          <label htmlFor="phone" className={styles.formLabel}>
            <Phone size={18} aria-hidden="true" />
            S·ªë ƒëi·ªán tho·∫°i <span className={styles.required}>*</span>
          </label>
          <input
            type="tel"
            id="phone"
            name="phone"
            value={formData.phone}
            onChange={handleInputChange}
            className={`${styles.formInput} ${errors.phone ? styles.inputError : ''}`}
            placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n"
            aria-describedby={errors.phone ? 'phone-error' : undefined}
            autoComplete="tel"
          />
          {errors.phone && (
            <span id="phone-error" className={styles.errorMessage} role="alert">
              <AlertCircle size={16} aria-hidden="true" />
              {errors.phone}
            </span>
          )}
        </div>

        {/* Subject Field */}
        <div className={styles.formGroup}>
          <label htmlFor="subject" className={styles.formLabel}>
            <MessageSquare size={18} aria-hidden="true" />
            Ch·ªß ƒë·ªÅ <span className={styles.required}>*</span>
          </label>
          <select
            id="subject"
            name="subject"
            value={formData.subject}
            onChange={handleInputChange}
            className={`${styles.formSelect} ${errors.subject ? styles.inputError : ''}`}
            aria-describedby={errors.subject ? 'subject-error' : undefined}
          >
            <option value="">Ch·ªçn ch·ªß ƒë·ªÅ</option>
            <option value="tuyen-sinh">T∆∞ v·∫•n tuy·ªÉn sinh</option>
            <option value="chuong-trinh">Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o</option>
            <option value="hoc-phi">H·ªçc ph√≠ v√† h·ªçc b·ªïng</option>
            <option value="co-so-vat-chat">C∆° s·ªü v·∫≠t ch·∫•t</option>
            <option value="sinh-vien">H·ªó tr·ª£ sinh vi√™n</option>
            <option value="thuc-tap">Th·ª±c t·∫≠p v√† vi·ªác l√†m</option>
            <option value="khac">Kh√°c</option>
          </select>
          {errors.subject && (
            <span id="subject-error" className={styles.errorMessage} role="alert">
              <AlertCircle size={16} aria-hidden="true" />
              {errors.subject}
            </span>
          )}
        </div>

        {/* Message Field */}
        <div className={styles.formGroup}>
          <label htmlFor="message" className={styles.formLabel}>
            <MessageSquare size={18} aria-hidden="true" />
            N·ªôi dung tin nh·∫Øn <span className={styles.required}>*</span>
          </label>
          <textarea
            id="message"
            name="message"
            value={formData.message}
            onChange={handleInputChange}
            rows={5}
            className={`${styles.formTextarea} ${errors.message ? styles.inputError : ''}`}
            placeholder="Nh·∫≠p n·ªôi dung tin nh·∫Øn c·ªßa b·∫°n..."
            aria-describedby={errors.message ? 'message-error' : undefined}
            maxLength={1000}
          />
          <div className={styles.characterCount}>
            {formData.message.length}/1000 k√Ω t·ª±
          </div>
          {errors.message && (
            <span id="message-error" className={styles.errorMessage} role="alert">
              <AlertCircle size={16} aria-hidden="true" />
              {errors.message}
            </span>
          )}
        </div>

        {/* Submit Status Messages */}
        {submitStatus === 'success' && (
          <div className={styles.successMessage} role="alert">
            <CheckCircle size={20} aria-hidden="true" />
            <span>C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i tin nh·∫Øn! Th√¥ng tin ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i v·ªõi b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ qua email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i b·∫°n ƒë√£ cung c·∫•p.</span>
          </div>
        )}

        {submitStatus === 'error' && (
          <div className={styles.errorMessageBox} role="alert">
            <AlertCircle size={20} aria-hidden="true" />
            <span>C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp qua hotline: 024.3123.4567</span>
          </div>
        )}

        {/* Submit Button */}
        <button
          type="submit"
          disabled={isSubmitting}
          className={`${styles.submitButton} ${isSubmitting ? styles.submitting : ''}`}
          aria-label={isSubmitting ? 'ƒêang g·ª≠i tin nh·∫Øn' : 'G·ª≠i tin nh·∫Øn'}
        >
          {isSubmitting ? (
            <>
              <Loader2 size={20} className={styles.spinner} aria-hidden="true" />
              ƒêang g·ª≠i...
            </>
          ) : (
            <>
              <Send size={20} aria-hidden="true" />
              G·ª≠i tin nh·∫Øn
            </>
          )}
        </button>

        <p className={styles.formNote}>
          <span className={styles.required}>*</span> C√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        </p>
      </form>
    </div>
  );
};

export default ContactForm;
